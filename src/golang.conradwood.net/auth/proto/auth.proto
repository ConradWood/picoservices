
syntax = "proto3";

package auth;

message Group {
 string GroupID=1;
 string Name=2;
}

message VerifyRequest {
 string Token = 1;
}

message VerifyResponse {
 string UserID = 1;
}

message GetDetailRequest {
string UserID = 1;
}
message GetDetailResponse {
string UserID = 1;
string Email = 2;
string FirstName = 3;
string LastName =4;
// only set when creating users
string Password=5;
repeated Group Groups=6;
}

message AuthenticatePasswordRequest {
string Email=1;
string Password=2;
}
message VerifyPasswordResponse {
GetDetailResponse User = 1;
string Token = 2;
}

message CreateUserRequest {
// e.g. cnw
string UserName = 1;
// e.g. junkmail@conradwood.net
string Email = 2;
string FirstName = 3;
string LastName =4;
string Password=5;
}

message UserByEmailRequest {
string Email=1;
}

message AddToGroupRequest {
string UserID=1;
string GroupID=2;
}
message RemoveFromGroupRequest {
string UserID=1;
string GroupID=2;
}
message ListGroupRequest {
string GroupID=1;
}

message UserListResponse {
repeated GetDetailResponse Users=1;
}
service AuthenticationService {
// authenticate a user by username/password, return token
 rpc AuthenticatePassword(AuthenticatePasswordRequest) returns (VerifyPasswordResponse) ;

// verify a user by token
 rpc VerifyUserToken(VerifyRequest) returns (VerifyResponse);
 rpc GetUserByToken(VerifyRequest) returns (GetDetailResponse);
 rpc GetUserDetail(GetDetailRequest) returns (GetDetailResponse) ;
 rpc CreateUser(CreateUserRequest) returns (GetDetailResponse);
 // will look up a user by email. Email may be any golang parseable format,
 // e.g. "Conrad Wood" <cnw@gurusystems.com> is ok
 // if a given email returns more than one user, this will throw an error!
 rpc GetUserByEmail(UserByEmailRequest) returns (GetDetailResponse);
 rpc AddUserToGroup(AddToGroupRequest) returns (GetDetailResponse);
 rpc RemoveUserFromGroup(RemoveFromGroupRequest)  returns (GetDetailResponse);
 rpc ListUsersInGroup(ListGroupRequest) returns (UserListResponse);
}
