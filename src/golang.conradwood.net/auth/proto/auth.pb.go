// Code generated by protoc-gen-go.
// source: proto/auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	proto/auth.proto

It has these top-level messages:
	VerifyRequest
	VerifyResponse
	GetDetailRequest
	GetDetailResponse
	ChallengeRequest
	ChallengeResponse
	AuthTokenRequest
	AuthTokenResponse
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// import "google/protobuf/empty.proto";
// import "google/protobuf/duration.proto";
// import "examples/sub/message.proto";
// import "examples/sub2/message.proto";
// import "google/protobuf/timestamp.proto";
type VerifyRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token" json:"Token,omitempty"`
}

func (m *VerifyRequest) Reset()                    { *m = VerifyRequest{} }
func (m *VerifyRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyRequest) ProtoMessage()               {}
func (*VerifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VerifyRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VerifyResponse struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
}

func (m *VerifyResponse) Reset()                    { *m = VerifyResponse{} }
func (m *VerifyResponse) String() string            { return proto.CompactTextString(m) }
func (*VerifyResponse) ProtoMessage()               {}
func (*VerifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VerifyResponse) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetDetailRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
}

func (m *GetDetailRequest) Reset()                    { *m = GetDetailRequest{} }
func (m *GetDetailRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDetailRequest) ProtoMessage()               {}
func (*GetDetailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetDetailRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetDetailResponse struct {
	UserID    string `protobuf:"bytes,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	Email     string `protobuf:"bytes,2,opt,name=Email,json=email" json:"Email,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=FirstName,json=firstName" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=LastName,json=lastName" json:"LastName,omitempty"`
}

func (m *GetDetailResponse) Reset()                    { *m = GetDetailResponse{} }
func (m *GetDetailResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDetailResponse) ProtoMessage()               {}
func (*GetDetailResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetDetailResponse) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetDetailResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetDetailResponse) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *GetDetailResponse) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type ChallengeRequest struct {
	Email string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
}

func (m *ChallengeRequest) Reset()                    { *m = ChallengeRequest{} }
func (m *ChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeRequest) ProtoMessage()               {}
func (*ChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChallengeRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type ChallengeResponse struct {
	Email     string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
	Challenge string `protobuf:"bytes,2,opt,name=Challenge,json=challenge" json:"Challenge,omitempty"`
}

func (m *ChallengeResponse) Reset()                    { *m = ChallengeResponse{} }
func (m *ChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*ChallengeResponse) ProtoMessage()               {}
func (*ChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChallengeResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ChallengeResponse) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

type AuthTokenRequest struct {
	Email     string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
	Challenge string `protobuf:"bytes,2,opt,name=Challenge,json=challenge" json:"Challenge,omitempty"`
	Hash      string `protobuf:"bytes,3,opt,name=Hash,json=hash" json:"Hash,omitempty"`
}

func (m *AuthTokenRequest) Reset()                    { *m = AuthTokenRequest{} }
func (m *AuthTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthTokenRequest) ProtoMessage()               {}
func (*AuthTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AuthTokenRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthTokenRequest) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

func (m *AuthTokenRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type AuthTokenResponse struct {
	User  *GetDetailResponse `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Token string             `protobuf:"bytes,2,opt,name=Token,json=token" json:"Token,omitempty"`
}

func (m *AuthTokenResponse) Reset()                    { *m = AuthTokenResponse{} }
func (m *AuthTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthTokenResponse) ProtoMessage()               {}
func (*AuthTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AuthTokenResponse) GetUser() *GetDetailResponse {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *AuthTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*VerifyRequest)(nil), "auth.VerifyRequest")
	proto.RegisterType((*VerifyResponse)(nil), "auth.VerifyResponse")
	proto.RegisterType((*GetDetailRequest)(nil), "auth.GetDetailRequest")
	proto.RegisterType((*GetDetailResponse)(nil), "auth.GetDetailResponse")
	proto.RegisterType((*ChallengeRequest)(nil), "auth.ChallengeRequest")
	proto.RegisterType((*ChallengeResponse)(nil), "auth.ChallengeResponse")
	proto.RegisterType((*AuthTokenRequest)(nil), "auth.AuthTokenRequest")
	proto.RegisterType((*AuthTokenResponse)(nil), "auth.AuthTokenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthenticationService service

type AuthenticationServiceClient interface {
	// authenticate a user by username/password
	GetAuthChallenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error)
	GetUserToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenResponse, error)
	// verify a user by token
	VerifyUserToken(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	GetUserDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
}

type authenticationServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticationServiceClient(cc *grpc.ClientConn) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) GetAuthChallenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error) {
	out := new(ChallengeResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/GetAuthChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetUserToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenResponse, error) {
	out := new(AuthTokenResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/GetUserToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) VerifyUserToken(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/VerifyUserToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetUserDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/GetUserDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthenticationService service

type AuthenticationServiceServer interface {
	// authenticate a user by username/password
	GetAuthChallenge(context.Context, *ChallengeRequest) (*ChallengeResponse, error)
	GetUserToken(context.Context, *AuthTokenRequest) (*AuthTokenResponse, error)
	// verify a user by token
	VerifyUserToken(context.Context, *VerifyRequest) (*VerifyResponse, error)
	GetUserDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
}

func RegisterAuthenticationServiceServer(s *grpc.Server, srv AuthenticationServiceServer) {
	s.RegisterService(&_AuthenticationService_serviceDesc, srv)
}

func _AuthenticationService_GetAuthChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetAuthChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/GetAuthChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetAuthChallenge(ctx, req.(*ChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/GetUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetUserToken(ctx, req.(*AuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_VerifyUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).VerifyUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/VerifyUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).VerifyUserToken(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/GetUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetUserDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenticationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthChallenge",
			Handler:    _AuthenticationService_GetAuthChallenge_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _AuthenticationService_GetUserToken_Handler,
		},
		{
			MethodName: "VerifyUserToken",
			Handler:    _AuthenticationService_VerifyUserToken_Handler,
		},
		{
			MethodName: "GetUserDetail",
			Handler:    _AuthenticationService_GetUserDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}

func init() { proto.RegisterFile("proto/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0x5d, 0x8b, 0xda, 0x40,
	0x14, 0x55, 0x1b, 0xc5, 0xdc, 0xd6, 0x36, 0x4e, 0xad, 0x4a, 0xf0, 0xa1, 0x0c, 0x14, 0xa4, 0x05,
	0x05, 0xfb, 0x5e, 0xb0, 0xd5, 0xda, 0x42, 0xe9, 0x83, 0xed, 0xfa, 0xb0, 0x6f, 0xb3, 0x72, 0x35,
	0xc3, 0xc6, 0x8c, 0x9b, 0x99, 0x2c, 0x2c, 0xfb, 0x7b, 0xf6, 0x7f, 0x2e, 0xf3, 0x11, 0x8d, 0xba,
	0xfa, 0x36, 0xf7, 0xde, 0x93, 0x73, 0xce, 0x9c, 0xb9, 0x81, 0x60, 0x9b, 0x0a, 0x25, 0x86, 0x2c,
	0x53, 0xd1, 0xc0, 0x1c, 0x89, 0xa7, 0xcf, 0x61, 0x6f, 0x2d, 0xc4, 0x3a, 0xc6, 0x21, 0xdb, 0xf2,
	0x21, 0x4b, 0x12, 0xa1, 0x98, 0xe2, 0x22, 0x91, 0x16, 0x43, 0x3f, 0x41, 0x63, 0x81, 0x29, 0x5f,
	0x3d, 0xcc, 0xf1, 0x2e, 0x43, 0xa9, 0x48, 0x0b, 0xaa, 0xff, 0xc5, 0x2d, 0x26, 0xdd, 0xf2, 0xc7,
	0x72, 0xdf, 0x9f, 0x57, 0x95, 0x2e, 0x68, 0x1f, 0xde, 0xe6, 0x30, 0xb9, 0x15, 0x89, 0x44, 0xd2,
	0x86, 0xda, 0x95, 0xc4, 0xf4, 0xf7, 0xc4, 0x01, 0x6b, 0x99, 0xa9, 0xe8, 0x67, 0x08, 0x66, 0xa8,
	0x26, 0xa8, 0x18, 0x8f, 0x73, 0xce, 0x73, 0xd8, 0x47, 0x68, 0x16, 0xb0, 0x97, 0x89, 0xb5, 0xb1,
	0xe9, 0x86, 0xf1, 0xb8, 0x5b, 0xb1, 0xc6, 0x50, 0x17, 0xa4, 0x07, 0xfe, 0x4f, 0x9e, 0x4a, 0xf5,
	0x97, 0x6d, 0xb0, 0xfb, 0xca, 0x4c, 0xfc, 0x55, 0xde, 0x20, 0x21, 0xd4, 0xff, 0x30, 0x37, 0xf4,
	0xcc, 0xb0, 0x1e, 0xbb, 0x9a, 0xf6, 0x21, 0xf8, 0x11, 0xb1, 0x38, 0xc6, 0x64, 0x8d, 0x85, 0xcb,
	0x5b, 0x8d, 0x72, 0x41, 0x83, 0xce, 0xa0, 0x59, 0x40, 0x3a, 0x9b, 0x2f, 0x42, 0xb5, 0x9d, 0x1d,
	0xd4, 0x19, 0xf5, 0x97, 0x79, 0x83, 0x5e, 0x43, 0x30, 0xce, 0x54, 0x64, 0xf2, 0xbd, 0x28, 0x79,
	0x99, 0x87, 0x10, 0xf0, 0x7e, 0x31, 0x19, 0xb9, 0xfb, 0x7a, 0x11, 0x93, 0x11, 0x5d, 0x40, 0xb3,
	0xc0, 0xed, 0x4c, 0x7e, 0x01, 0x4f, 0x67, 0x69, 0xb8, 0x5f, 0x8f, 0x3a, 0x03, 0xb3, 0x1c, 0x27,
	0x91, 0xcf, 0x3d, 0x1d, 0xf1, 0xfe, 0xe5, 0x2b, 0x85, 0x97, 0x1f, 0x3d, 0x55, 0xe0, 0x83, 0x26,
	0xc6, 0x44, 0xf1, 0xa5, 0x59, 0x9d, 0x7f, 0x98, 0xde, 0xf3, 0x25, 0x92, 0xa9, 0x79, 0x69, 0x3d,
	0xdb, 0x59, 0x25, 0x6d, 0x2b, 0x71, 0x1c, 0x6c, 0xd8, 0x39, 0xe9, 0x5b, 0x69, 0x5a, 0x22, 0x63,
	0x78, 0x33, 0x43, 0xa5, 0x6d, 0x1a, 0xf5, 0x9c, 0xe2, 0x38, 0xa8, 0x9c, 0xe2, 0xe4, 0x92, 0xb4,
	0x44, 0xbe, 0xc1, 0x3b, 0xbb, 0x9d, 0x7b, 0x96, 0xf7, 0x16, 0x7d, 0xb0, 0xdb, 0x61, 0xeb, 0xb0,
	0xb9, 0xfb, 0xfe, 0x3b, 0x34, 0x9c, 0x05, 0x1b, 0x4c, 0xee, 0xe1, 0x78, 0x91, 0xc3, 0x73, 0x09,
	0xd2, 0xd2, 0x4d, 0xcd, 0xfc, 0x4f, 0x5f, 0x9f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x2c, 0x5f,
	0xba, 0x87, 0x03, 0x00, 0x00,
}
